AWSTemplateFormatVersion: 2010-09-09
Description: AppSync setup
Parameters:
  FunctionStack:
    Description: The stack name that deploys the Lambda functions to invoke.
    Type: String
Resources:
  DataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
      Policies:
        - PolicyName: LambdaInvoker
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource:
{{#each (sortBy resources 'type')}}
                  - Fn::Join:
                    - ''
                    - - 'arn:aws:lambda:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':function:'
                      - Fn::ImportValue:
                          !Sub '${FunctionStack}-functions-{{toClassName type}}'
                  - Fn::Join:
                    - ''
                    - - 'arn:aws:lambda:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':function:'
                      - Fn::ImportValue:
                          !Sub '${FunctionStack}-functions-{{toClassName type}}'
                      - ':*'
{{/each}}
      RoleName: !Sub '${AWS::StackName}-lambda-datasource'
  GqlApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType:  AWS_IAM
      Name: !Ref AWS::StackName
  GqlSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GqlApi.ApiId
      Definition: |
        type Mutation {
{{#each (sortBy resources 'type')}}{{#each (sortBy operations 'method')}}{{#ifNEq method 'GET'}}
          {{toLowerCase method}}{{toClassName ../type}}({{#ifEmpty body}}{{else}}{{toMethodName body.type}}: {{toClassName body.type}}Input! {{#ifNotEmpty parameters}}, {{/ifNotEmpty}}{{/ifEmpty}}{{#each parameters}}{{toMethodName name}}: {{translateGraphQL type ../../enums ../../models false}}{{#ifNotLast ../parameters @index}}, {{/ifNotLast}}{{/each}}{{#ifEmpty parameters}}{{else}}, {{/ifEmpty}}cognitoIdentityId__: String): {{#successResponseType responses ../../models}}{{toClassName name}}{{/successResponseType}}!
{{/ifNEq}}{{/each}}{{/each}}
        }

        type Query {
{{#each (sortBy resources 'type')}}{{#each (sortBy operations 'method')}}{{#ifEq method 'GET'}}
          {{toLowerCase method}}{{toClassName ../type}}({{#each parameters}}{{toMethodName name}}: {{translateGraphQL type ../../../enums ../../../models false}}{{#ifNotLast ../parameters @index}}, {{/ifNotLast}}{{/each}}{{#ifEmpty parameters}}{{else}}, {{/ifEmpty}}cognitoIdentityId__: String): {{#successResponseType responses ../../models}}{{toClassName name}}{{/successResponseType}}
{{/ifEq}}{{/each}}{{/each}}
        }

{{#each (sortBy models 'name')}}
        input {{toClassName name}}Input {
{{#each (sortBy fields 'name')}}
          {{toMethodName name}}: {{translateGraphQL type ../../enums ../../models true}}
{{/each}}
        }
        type {{toClassName name}} {
{{#each (sortBy fields 'name')}}
          {{toMethodName name}}: {{translateGraphQL type ../../enums ../../models false}}{{#if required}}! {{/if}}
{{/each}}
        }
{{/each}}

{{#each (sortBy enums 'name')}}
        enum {{toClassName name}} {
{{#each (sortBy values 'name')}}
          {{toUpperCase name}}
{{/each}}
        }
{{/each}}

        schema {
          query: Query
          mutation: Mutation
        }
    DependsOn:
      - GqlApi
{{#each (sortBy resources 'type')}}
  {{toClassName type}}DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GqlApi.ApiId
      LambdaConfig:
        LambdaFunctionArn:
          Fn::Join:
            - ''
            - - 'arn:aws:lambda:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':function:'
              - Fn::ImportValue:
                  !Sub '${FunctionStack}-functions-{{toClassName type}}'
      Name: {{toSnakeCase type}}_lambda
      ServiceRoleArn: !GetAtt DataSourceRole.Arn
      Type: AWS_LAMBDA
    DependsOn:
      - DataSourceRole
      - GqlApi
{{#each (sortBy operations 'method')}}
  {{capitalize method}}{{toClassName ../type}}Resolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GqlApi.ApiId
      FieldName: {{toLowerCase method}}{{toClassName ../type}}
      TypeName: {{#ifEq method 'GET'}}Query{{else}}Mutation{{/ifEq}}
      DataSourceName: !GetAtt {{toClassName ../type}}DataSource.Name
      RequestMappingTemplate: |
        #set( $cognitoIdentityId = $context.identity.cognitoIdentityId )
        #if($context.identity.userArn.matches('arn:aws:iam::\d+:user/.*') && $context.args.cognitoIdentityId__)
          #set( $cognitoIdentityId = $context.args.cognitoIdentityId__ )
        #end
        #set( $unamepwd = "$util.urlEncode($cognitoIdentityId):" )
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "source": "AppSync",
            "httpMethod": "{{toLowerCase method}}",
            {{#ifEmpty body}}{{else}}"body": "$util.escapeJavaScript($util.toJson($context.args.{{toMethodName body.type}}))",
            {{/ifEmpty}}"headers": {
              "Authorization": "Basic $util.base64Encode($unamepwd)",{{#eachSelected (sortBy parameters 'name') 'location' 'Header' ',
              '}}
              "{{name}}": "$util.escapeJavaScript($context.args.{{toMethodName name}})"{{/eachSelected}}
            },
            "pathParameters": {
{{#eachSelected (sortBy parameters 'name') 'location' 'Path' ',
'}}
              "{{name}}": "$util.escapeJavaScript($context.args.{{toMethodName name}})"{{/eachSelected}}
            },
            "queryStringParameters": {
{{#eachSelected (sortBy parameters 'name') 'location' 'Query' ',
'}}
              "{{name}}": "$util.escapeJavaScript($context.args.{{toMethodName name}})"{{/eachSelected}}
            }
          }
        }
      ResponseMappingTemplate: |
        #if($context.result.statusCode >= 200 && $context.result.statusCode <= 299)
          $context.result.body
        #else
          $utils.error($util.parseJson($context.result.body).message, $context.result.statusCode.toString(), $util.parseJson($context.result.body))
        #end
    DependsOn:
      - GqlApi
      - GqlSchema
      - {{toClassName ../type}}DataSource
{{/each}}
{{#eachSubModel ./type ../models}}
  Get{{toClassName (toPlural name)}}By{{toClassName ../type}}IdResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GqlApi.ApiId
      FieldName: {{_meta_.fieldName}}
      TypeName: {{toClassName ../type}}
      DataSourceName: !GetAtt {{toClassName ../type}}DataSource.Name
      RequestMappingTemplate: |
        #set( $cognitoIdentityId = $context.identity.cognitoIdentityId )
        #if($context.identity.userArn.matches('arn:aws:iam::\d+:user/.*') && $context.args.cognitoIdentityId__)
          #set( $cognitoIdentityId = $context.args.cognitoIdentityId__ )
        #end
        #set( $unamepwd = "$util.urlEncode($cognitoIdentityId):" )
        {
          "version" : "2017-02-28",
          "operation": "BatchInvoke",
          "payload": {
            "source": "AppSync",
            "resource": "get{{toClassName (toPlural name)}}By{{toClassName ../type}}Id",
            "headers": {
              "Authorization": "Basic $util.base64Encode($unamepwd)",
            },
            "pathParameters": {
              "{{toMethodName ../type}}Id": "$util.escapeJavaScript($context.source.id)"
            },
            "queryStringParameters": {
            }
          }
        }
      ResponseMappingTemplate: |
        #if($context.result.statusCode >= 200 && $context.result.statusCode <= 299)
        #set( $kids = $util.parseJson($context.result.body) )
        #foreach( ${{toMethodName name}} in ${{toMethodName (toPlural name)}} )
        #set( ${{toMethodName name}}.cognitoIdentityId__ = $context.source.id)
        #end
          $util.toJson(${{toMethodName (toPlural name)}})
        #else
          $utils.error($util.parseJson($context.result.body).message, $context.result.statusCode.toString(), $util.parseJson($context.result.body))
        #end
    DependsOn:
      - GqlApi
      - GqlSchema
      - {{toClassName ../type}}DataSource
{{/eachSubModel}}
{{/each}}
Outputs:
  ApiEndpoint:
    Description: The endpoint for the AppSync API.
    Value: !GetAtt GqlApi.GraphQLUrl
